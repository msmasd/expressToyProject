### MongoDB
C++로 작성된 문서지향(Document-Oriented)적 Cross platform 데이터베이스이며, 뛰어난 확장성과 성능을 자랑한다. 현존하는 NoSQL데이터베이스 중 인지도 1위를 유지하고있다.

### NoSQL
NoSQL은 SQL이 없는 디비가 아니고, **Not Only SQL**이다. 기존 RDBMS의 한계를 극복하기 위해 만들어진 새로운 형태의 데이터저장소이다. 관계형 DB가 아니므로, RDMS처럼 고정된 스키마 및 JOIN이 존재하지 않습니다.

### Document
Document-Oriented 디비인데 여기서 말하는 Document는? -> 단순히 '문서'로 번역하면 애매하고.. Document는 RDMS의 record와 비슷한 개념이다. 이의 데이터 구조는 한개 이상의 *key-value pair*로 이루어져 있다는 의미.

### MongoDB 샘플 Document
```json
{
    "_id": ObjectId("5099803df3f4948bd2f98391"),
    "username": "velopert",
    "name": { "first": "M.J.", "last": "Kim" }
}
```
여기서 _id, username, name은 *key*이고 그 오른쪽에 있는 값들이 *value*이다.
*_id*는 12byte의 값이고, 각 Document의 유일함(Uniqueness)를 제공한다.
이 값의 첫번째 4bytes는 현재 timestamp, 다음 3bytes는 machine id, 다음 2bytes는 MongoDB서버의 프로세스id, 마지막 3bytes는 순차번호입니다.
Document는 동적(dynamic)의 schema를 갖고 있습니다. 같은 Collection안에 있는 Document끼리 다른 schema를 갖고 있을 수 있는데, 쉽게 말하면 서로 다른 데이터(즉 다른 key)들을 가지고 있을 수 있다.

### Collection
MongoDB Document의 그룹이다. Document들이 Collection내부에 위치하고 있습니다.
RDMS의 table과 비슷한 개념인데 RDMS와 달리 schema를 따로 가지고 있지않는다.
Document 부분설명에 나와있듯이 각 Document들이 동적인 schema를 가지고 있으니까요

### Database
Collection들의 물리적인 컨테이너입니다. 각 Database는 파일시스템에 여러 파일들로 저장됩니다.

> ### RDMS와의 비교

| RDBMS       | MongoDB                  |
| ----------- | ------------------------ |
| Database    | Database                 |
| Table       | Collection               |
| Tuple / Row | Document                 |
| Column      | Key / Field              |
| Table Join  | Embedded Document        |
| Primary Key | Primary Key(_id)         |
|             | Database Server & Client |
| mysqld      | mongod                   |
| mysql       | mongo                    |

### 장점
 - Schema-less(Schema가 없다. 같은 Collection안에 있을지라도 다른 Schema를 가지고 있을 수 있다.)
 - 각 객체의 구조가 뚜렷하다.
 - 복잡한 JOIN이 없다.
 - Deep Query ability(문서지향적 Query Language를 사용하여 SQL만큼 강력한 Query 성능을 제공한다.)
 - 어플리케이션에서 사용되는 객체를 데이터베이스에 추가 할 때 Conversion / Mapping이 불필요하다.

> ## Data Modelling

### Schema 디자인 할 떄 고려사항
 - 사용자 요구(User Requirement)에 따라 Schema를 디자인한다.
 - 객체들을 함께 사용하게 된다면 한 Document에 합쳐서 사용한다.(예: 게시물 - 덧글과의 관계) 그렇지 않으면 따로 사용한다.(그리고 Join을 사용하지 않는걸 확실히 해둔다)
 - 읽을때 join하는게 아니라 데이터를 작성 할 떄 join한다.

### Database 생성: *use*
*use DATABASE_NAME*명령어를 통하여 Database를 생성할 수 있습니다.
생성한 후, 생성된 데이터베이스를 사용하게 되고, 이미 존재한다면 현존하는 데이터베이스를 사용한다.
```DB
> use mongodb_tutorial
switched to db mongodb_tutorial
```

현재 사용중인 데이터베이스를 확인하려면 *db*명령어를 입력한다.
```DB
> db
mongodb_tutorial
```

내가 만든 데이터베이스 리스트들을 확인하려면 *show dbs*명령어를 입력한다.
``` DB
> show dbs
local 0.000GB
```
방금 만든 mongodb_tutorial가 없다.
-> 리스트에서 방금 만든 데이터베이스를 볼려면 최소 한개의 Document를 추가해야 한다.
```DB
> db.book.insert({ "name": MongoDB Tutorial", "author": "velopert" });

WriteResult({ "nInserted": 1 })
> show dbs
local               0.000GB
mongodb_tutorial    0.000GB
```

### Database 제거: *db.dropDatabase()*
Database를 제거할떈 *db.dropDatabase()*명령어를 사용한다.
이 명령어를 사용하기 전, *use DATABASE_NAME*으로 삭제하고자 하는 데이터베이스를 선택해야 한다.
```DB
> use mongodb_tutorial
switched to db mongodb_tutorial
> db.dropDatabase();
{ "dropped": "mongodb_tutorial", "ok": 1 }
```

### Collection 생성: *db.createCollection()*
Collection을 생성할 때는 *db.createCollection(name, [options])*명령어를 사용한다.
* name은 생성하려는 컬렉션의 이름
* option은 document 타입으로 구성된 해당 컬렉션의 설정값

#### Option:

| Field     | Type    | 설명                                                                                                                                                              |
| --------- | ------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| capped    | Boolean | 이 값을 true로 설정하명 capped collection을 활성화 시킨다. Capped collection이란, 고정된 크기(fixed size)를 가진 컬렉션. size가 초과되면 가장 오래된 데이터를 덮어 쓴다. **이 값을 true로 설정하면 size값을 꼭 설정애햐한다.** |
| autoIndex | Boolean | 이 값을 true로 설정하면, _id필드에 index를 자동으로 생성한다. 기본은 false                                                                                                             |
| size      | number  | Capped collection을 위해 해당 컬렉션의 최대 사이트를 ~bytes로 지정                                                                                                                |
| max       | number  | 해당 컬렉션에 추가 할 수 있는 최대 갯수를 설정한다.                                                                                                                                  |

* 참조 사이트 https://velopert.com/457