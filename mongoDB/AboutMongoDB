### MongoDB
C++로 작성된 문서지향(Document-Oriented)적 Cross platform 데이터베이스이며, 뛰어난 확장성과 성능을 자랑한다. 현존하는 NoSQL데이터베이스 중 인지도 1위를 유지하고있다.

### NoSQL
NoSQL은 SQL이 없는 디비가 아니고, **Not Only SQL**이다. 기존 RDBMS의 한계를 극복하기 위해 만들어진 새로운 형태의 데이터저장소이다. 관계형 DB가 아니므로, RDMS처럼 고정된 스키마 및 JOIN이 존재하지 않습니다.

### Document
Document-Oriented 디비인데 여기서 말하는 Document는? -> 단순히 '문서'로 번역하면 애매하고.. Document는 RDMS의 record와 비슷한 개념이다. 이의 데이터 구조는 한개 이상의 *key-value pair*로 이루어져 있다는 의미.

### MongoDB 샘플 Document
```json
{
    "_id": ObjectId("5099803df3f4948bd2f98391"),
    "username": "velopert",
    "name": { "first": "M.J.", "last": "Kim" }
}
```
여기서 _id, username, name은 *key*이고 그 오른쪽에 있는 값들이 *value*이다.
*_id*는 12byte의 값이고, 각 Document의 유일함(Uniqueness)를 제공한다.
이 값의 첫번째 4bytes는 현재 timestamp, 다음 3bytes는 machine id, 다음 2bytes는 MongoDB서버의 프로세스id, 마지막 3bytes는 순차번호입니다.
Document는 동적(dynamic)의 schema를 갖고 있습니다. 같은 Collection안에 있는 Document끼리 다른 schema를 갖고 있을 수 있는데, 쉽게 말하면 서로 다른 데이터(즉 다른 key)들을 가지고 있을 수 있다.

### Collection
MongoDB Document의 그룹이다. Document들이 Collection내부에 위치하고 있습니다.
RDMS의 table과 비슷한 개념인데 RDMS와 달리 schema를 따로 가지고 있지않는다.
Document 부분설명에 나와있듯이 각 Document들이 동적인 schema를 가지고 있으니까요

### Database
Collection들의 물리적인 컨테이너입니다. 각 Database는 파일시스템에 여러 파일들로 저장됩니다.

> ### RDMS와의 비교

| RDBMS       | MongoDB                  |
| ----------- | ------------------------ |
| Database    | Database                 |
| Table       | Collection               |
| Tuple / Row | Document                 |
| Column      | Key / Field              |
| Table Join  | Embedded Document        |
| Primary Key | Primary Key(_id)         |
|             | Database Server & Client |
| mysqld      | mongod                   |
| mysql       | mongo                    |

### 장점
 - Schema-less(Schema가 없다. 같은 Collection안에 있을지라도 다른 Schema를 가지고 있을 수 있다.)
 - 각 객체의 구조가 뚜렷하다.
 - 복잡한 JOIN이 없다.
 - Deep Query ability(문서지향적 Query Language를 사용하여 SQL만큼 강력한 Query 성능을 제공한다.)
 - 어플리케이션에서 사용되는 객체를 데이터베이스에 추가 할 때 Conversion / Mapping이 불필요하다.
 - 

> ## Data Modelling

### Schema 디자인 할 떄 고려사항
 - 사용자 요구(User Requirement)에 따라 Schema를 디자인한다.
 - 객체들을 함께 사용하게 된다면 한 Document에 합쳐서 사용한다.(예: 게시물 - 덧글과의 관계) 그렇지 않으면 따로 사용한다.(그리고 Join을 사용하지 않는걸 확실히 해둔다)
 - 읽을때 join하는게 아니라 데이터를 작성 할 떄 join한다.